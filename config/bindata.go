// Code generated by go-bindata.
// sources:
// config.toml
// DO NOT EDIT!

package config

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _configToml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x9c\x91\x41\x6b\x1b\x3f\x10\xc5\xef\xfa\x14\x83\xf7\x92\xc0\xff\x6f\xe2\xd0\x5e\x02\x86\x96\x50\xe8\xa1\xa5\x87\x1e\x4d\x58\xc6\xd2\x78\x57\x44\xd2\xa8\x33\x92\x5d\xf7\xd3\x17\xed\xc6\x76\x0c\x85\x86\xde\xa4\x9f\x9e\xde\x7b\xd2\x74\x1f\x6b\x19\x59\x1e\xe0\x8b\xc7\x08\x9f\x29\x04\x4a\xce\x74\x9f\x22\xfa\xf0\x00\x61\x9c\xc1\x07\xc5\xec\x29\xd9\xe3\x96\x64\x69\x39\x2e\xb1\x9a\xee\x91\xd3\xce\x0f\xe0\x48\xad\xf8\x5c\x3c\xa7\x07\xf8\x5e\x58\x08\x22\x06\xb5\x98\x14\xec\x24\xa9\x82\xed\x14\x6e\x02\xa3\x23\x07\x58\x40\x6a\x2a\x3e\xd2\xed\xd9\x65\x4f\xa2\x93\xc3\x6a\x79\xb7\xbc\x33\x66\x43\x69\xff\x64\x00\xe0\x24\x85\x35\x2c\xb2\xb0\x5b\x40\xf7\x38\x32\x2b\xc1\xc2\xd1\xb6\x0e\x0b\x60\x69\xcb\xfd\xbc\x98\x25\xd3\xc5\x9d\x0f\xa4\x53\x9f\x35\x2c\x16\x13\xb2\xb9\xf6\x96\x85\x14\xd6\xb0\x9a\x48\xc4\x9f\x7d\x13\xf6\x59\xd8\xc2\x1a\xee\xa1\xfb\x96\xc2\x11\xaa\x92\x03\x9f\x20\xb2\xa3\xff\xef\xff\x03\x0c\x81\x0f\x0a\x9a\xc9\xfa\x9d\x6f\x8f\x88\x5c\x53\x01\xde\xcd\x39\x50\xb8\x35\x6d\x2f\xb6\x55\x84\x52\x09\xc7\x39\x32\x78\x4a\x65\xaa\x00\xdd\xd7\xaa\x05\xb6\x04\x4a\x05\x76\x2c\x40\x68\x47\xa8\xc9\xff\xa8\x74\x12\xde\xb4\xb3\xc3\x48\xa9\xd9\x25\x9f\x06\xf0\x49\x0b\x86\x00\xf3\x37\xdf\x4e\xae\xea\x0b\xbd\xdd\x13\x93\x3b\x91\xe9\xe2\xdb\x32\x12\x95\x03\xcb\xf3\x3f\xc5\x9c\xee\xfe\x3d\xc9\x6c\x02\x0f\x83\x4f\xc3\xd3\x79\x68\x09\xe3\xab\x99\xb5\x09\xa9\xff\xd5\xc8\xfb\x3b\xe8\x22\x0d\xb8\x3d\x16\xd2\xf3\xe1\x16\xed\x73\xcd\xd7\x23\xc5\xa1\xe9\x57\xef\xa0\x73\x78\x9c\xa5\x96\x63\x16\xd2\xa6\xdb\x61\x50\x32\x66\x83\x81\xa4\xcc\xb9\x81\x2d\x86\x3e\x63\x19\x2f\xc9\x42\x91\x0b\xfd\x19\x8e\xac\x2f\x43\xbd\x92\xb2\x94\x8b\x54\x6d\xee\xf3\x33\x1d\xaf\x49\x55\x92\x0b\x31\x1b\x0a\xa8\xc5\x5b\x25\x14\x3b\xce\x65\x28\xe1\x36\x90\x3b\x37\x6d\xac\x04\xbd\xda\x57\x09\xab\x8b\x4d\x33\xbd\xfe\xb6\x8c\xaa\x07\x16\x77\x21\xa4\xbd\x25\x79\xdd\x9a\xb4\x3f\xd5\x3b\x03\x8b\x2f\x7b\x63\xcc\xef\x00\x00\x00\xff\xff\x74\x8f\x16\x95\x1d\x04\x00\x00")

func configTomlBytes() ([]byte, error) {
	return bindataRead(
		_configToml,
		"config.toml",
	)
}

func configToml() (*asset, error) {
	bytes, err := configTomlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "config.toml", size: 1053, mode: os.FileMode(509), modTime: time.Unix(1611799185, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"config.toml": configToml,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"config.toml": &bintree{configToml, map[string]*bintree{}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}
